{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","background","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","split","join","length","Alert","alert","class","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0868ebf9.chunk.js","sourcesContent":["//for props. explanation\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import reactDom from 'react-dom'\r\n//import{Link}from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" \r\n        data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" \r\n        aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" \r\n        aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n           <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n           </li>\r\n           <li className=\"nav-item\">\r\n              {/*Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">About</Link>*/}\r\n              {/* <Link className=\"nav-link\" to=\"/about\">About</Link> */}\r\n           </li>\r\n        \r\n          </ul>\r\n          {/* <div className=\"d-flex\">\r\n            <div className = \"bg-primary rounded mx-2\"  style= {{ height: '30px', width:'40px'}}></div>\r\n           \r\n              \r\n          </div> */}\r\n          <div className={`form-check form-switch text-${props.mode==='light'? 'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\"> Enable Dark Mode</label>\r\n          </div>\r\n       </div>\r\n     </div>\r\n  </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {title: PropTypes.string,\r\n                    AboutText:PropTypes.string,}\r\n\r\n                    // Navbar.defaultProps = {title:\"Set Title here\",\r\n//                        AboutText: 'about text here'\r\n//                       };                    ","// for state expalnation\r\nimport React ,{useState} from 'react'\r\n\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        //console.log(\" Uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase(); \r\n        setText(newText)\r\n        props.showAlert(\"converted to upper case\", \"success\");\r\n    }\r\n    const handleLoClick = ()=>{\r\n        //console.log(\" Lowercase was clicked\" + text);\r\n        let newText = text.toLowerCase(); \r\n        setText(newText)\r\n        props.showAlert(\"converted to lower case\", \"success\");\r\n    }    \r\n    // const activateLasers = ()=>{\r\n    //     console.log(\"i am laser\");\r\n    //     //var text =  document.getElementById(\"myText\");\r\n        \r\n        \r\n    // }\r\n    // const handleCopy = () => {\r\n        \r\n    //     var text = document.getElementById(\"myText\");\r\n    //     text.select();\r\n    //     navigator.clipboard.writeText(text.value);\r\n    // }\r\n    const handleExtraSpaces = () =>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"extra space removed\", \"success\");\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        //console.log(\"On change\");\r\n        \r\n       setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState(\"Enter Something in the text box above to Preview is here\");\r\n    //text = \"textafrea\"; //wrong way to set text\r\n    //setText(\"text\"); //correct way to set text\r\n    return (\r\n        \r\n    <>\r\n        <div className=\"container\"  style = {{color: props.mode==='dark'? 'white':'#132e48'}}>\r\n            <h1>{props.heading} </h1>\r\n            <div className=\"mb-3\">\r\n            \r\n            <textarea className=\"form-control\"  value={text} style = {{background: props.mode==='dark'? 'grey':'white', color: props.mode==='dark'? 'white':'#132e48'}}\r\n            onChange={handleOnChange} id=\"MyText\" rows=\"10\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert To UpperCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert To LowerCase</button>\r\n            {/* <button  className=\"btn btn-outline-danger mx-2\"onClick={activateLasers}> Activate Lasers </button> */}\r\n           {/* <button className=\"btn btn-primary mx-2\" onClick={handleCopy}> Copy </button> */}\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}> Remove Extra Spaces</button>\r\n           \r\n        </div>\r\n        <div className=\"container my-2\" style = {{color: props.mode==='dark'? 'white':'#132e48'}}>\r\n            <h2> Your Text Summary</h2>\r\n            <p> {text.split(\" \").length} Words and {text.length}</p>\r\n            <p> {0.008 * text.split(\" \").length} Words per minute</p>\r\n            <h2>Preview</h2>\r\n            <p> {text.length>0?text:\"Enter Something in the text box above to Preview is here\"}</p>\r\n        </div>\r\n    </>    \r\n\r\n)\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    \r\n        const capitalize = (word)=>{\r\n            const lower= word.toLowerCase();\r\n            return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n        }\r\n        return (\r\n           props.alert && <div class=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong> :{props.alert.msg}\r\n               \r\n            </div>\r\n    \r\n    )\r\n}\r\n","//import { useState } from 'react/cjs/react.development';\r\nimport './App.css';\r\n//import About from './Components/About';\r\nimport Navbar from './Components/Navbar';\r\nimport TextForm from './Components/TextForm';\r\nimport React, { useState } from 'react';\r\nimport Alert from './Components/Alert.js';\r\n//import React from \"react\";\r\n\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Route,\r\n//   Switch\r\n// } from \"react-router-dom\";\r\n\r\n\r\nfunction App() {\r\n  const[mode, setMode]= useState(\"light\");//whether dark mode is enable or not\r\n  const [alert, setAlert] = useState(null); // this will set the alert\r\n  const showAlert = (message , type)=>{                    // it helps to show alert function and basically it is a function\r\n      setAlert({\r\n        msg:message,\r\n        type: type\r\n    })             \r\n    setTimeout(() =>{\r\n      setAlert(null);\r\n    },1500);\r\n  }\r\n \r\n  const toggleMode = () =>{\r\n    if (mode === 'light'){\r\n    setMode('dark');\r\n    document.body.style.backgroundColor = \"#132e48\"\r\n    showAlert(\"Dark mode has been enabled\", 'success');\r\n    document.title= \"TextUtils- Dark Mode- Enable\";\r\n\r\n    }\r\n    else{\r\n    setMode('light');\r\n    document.body.style.backgroundColor = \"White\"\r\n    showAlert(\"Light mode has been enabled\", 'success');\r\n    document.title= \"TextUtils- Light Mode- Enable\";\r\n  }\r\n}\r\n\r\n\r\n  return (\r\n    <>\r\n  \r\n    \r\n\r\n    {/* <Router> */}\r\n    <Navbar title =\"TextUtils\" mode = {mode} toggleMode = {toggleMode}/>\r\n    <Alert alert =  {alert} />\r\n      \r\n    <div className=\"container my-3\">\r\n       {/* <Switch>\r\n          <Route exact path=\"/about\">\r\n            <About />\r\n          </Route> */}\r\n          \r\n          {/* <Router exact path=\"/\"> */}\r\n           <TextForm showAlert={showAlert} heading=\" Enter The Text to Analyse below\" mode={mode}/>\r\n          {/* </Router>\r\n        </Switch>\r\n     */}\r\n    </div>\r\n    {/* </Router> */}\r\n  </> \r\n     \r\n   \r\n  \r\n    \r\n   \r\n  );\r\n\r\n\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}